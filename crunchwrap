#!/bin/bash -e

# Copyright (c) 2020 Eli Gladman

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Crunchwrap
# A logic-less templating engine inspired by mustache. Written in pure bash.

# Install
# cp crunchwrap /usr/local/bin/cw && chmod +x /usr/local/bin/cw

readonly cw_version='0.1.0'

readonly cw_pattern_left='{{'
readonly cw_pattern_right='}}'
readonly cw_pattern_left_strict='{{!'
readonly cw_pattern_left_escaped='{{%'
readonly cw_pattern_left_import='{{@'

# BRE Regex
readonly regex_crunchwrap_syntax='^(.*)(\{\{[\%|\!\@]{0,1}[[:space:]][a-zA-Z0-9_/.-]{1,}[[:space:]]\}\})(.*)$'
readonly regex_character_class='^(\[\[\:)(crunchwrap_[a-zA-Z0-9_]{1,})(\:\]\])$'
readonly regex_crunchwrap_strict_syntax='^(.*)(\{\{\![[:space:]][a-zA-Z0-9_]{1,}[[:space:]]\}\})(.*)$'
readonly regex_crunchwrap_escaped_syntax='^(.*)(\{\{\%[[:space:]][a-zA-Z0-9_]{1,}[[:space:]]\}\})(.*)$'
readonly regex_crunchwrap_import_syntax='^(.*)(\{\{\@[[:space:]][a-zA-Z0-9_/.-]{1,}[[:space:]]\}\})(.*)$'

# Non-standard Character Classes
readonly cc_nospace='[[:crunchwrap_nospace:]]'
readonly cc_space='[[:crunchwrap_space:]]'
readonly cc_tab='[[:crunchwrap_tab:]]'
# FIXME: We will run into an issue if read in a line that already contains the
# above strings

# Defaults. These can be overridden from cli
fl_ignore_environment=0
fl_debug=0

CLR_CYAN='\033[36m'
CLR_RED='\033[0;31m'
CLR_NONE='\033[0m' # No color

_log() {
    # Usage: "hello world"
    printf '%b\n' "${0##*/}: $1" 1>&2
}

_debug() {
    # Usage: _debug "hello world"
    if [[ $fl_debug -eq 1 ]]; then
        _log "${CLR_CYAN}DEBUG:${CLR_NONE} $1"
    fi
}

_die() {
    # Usage: _die "goodbye cruel world" 128
    _log "${CLR_RED}FATAL:${CLR_NONE} $1"

    local rc
    # Default to return code: '1' if nothing is specified
    [[ -z "$2" ]] && rc=1
    exit $rc
}

_strip_left() {
    # Usage: _strip_left "string" "pattern"
    printf '%s\n' "${1##$2}"
}

_strip_right() {
    # Usage: _strip_right "string" "pattern"
    printf '%s\n' "${1%%$2}"
}

_strip_all() {
    # Usage: _strip_all "string" "pattern"
    printf '%s\n' "${1//$2}"
}

_trim() {
    # Usage: _trim "   example   string    "
    : "${1#"${1%%[![:space:]]*}"}"
    : "${_%"${_##*[![:space:]]}"}"
    printf '%s\n' "$_"
}

_replace_all() {
    # Usage: _replace_all "string" "pattern" "replace"
    printf '%s\n' "${1//$2/$3}"
}

_replace_first() {
    # Usage: _replace_first "string" "pattern" "replace"
    printf '%s\n' "${1/$2/$3}"
}

_escape_html () {
    # Usage: _esacpe_html "hello & goodbye"
    local string="$1"
    string=${string//&/&amp;}
    string=${string//</&lt;}
    string=${string//>/&gt;}
    string=${string//'"'/&quot;}
    printf '%s' "$string"
}

_type() {
    # Usage _type USER
    # Print common variable types given the variable name

    local variable=$(declare -p "$1")
    [[ $? -eq 0 ]] || return

    local regex='^declare -n [^=]+=\"([^\"]+)\"$'

    while [[ "$variable" =~ $regex ]]; do
        variable=$( declare -p ${BASH_REMATCH[1]} )
    done

    case "${variable#declare -}" in
        a*)
            printf '%s\n' "array"
            ;;
        A*)
            printf '%s\n' "associative_array"
            ;;
        i*)
            printf '%s\n' "int"
            ;;
        x*)
            printf '%s\n' "export"
            ;;
        *)
            printf '%s\n' "other"
            ;;
    esac
}

_flush() {
    # Usage: _flush foo bar baz
    # Empty array, and set integers to zero

    local variables=("$@")
    for var in "${variables[@]}"; do
        local type="$(_type $var)"
        case "$type" in
            array)
                eval "$var=()"
                ;;
            int)
                eval "$var=0"
                ;;
            *)
                _die "Unsupported. Variable: '$var' is type: '$type'"
                ;;
        esac
    done
}

_strip_brackets() {
    # Usage: _strip_brackets "{{ foo }}"

    # We can strip using pure bash by breaking it up into steps. Left then Right.
    local string_raw="$1"
    local string=""

    string_raw=$(_strip_left "$string_raw" "*$cw_pattern_left ")
    string=$(_strip_right "$string_raw" " $cw_pattern_right*")

    printf '%s\n' "$string"
}

_strip_character_classes() {
    # Usage: _strip_character_classes "Hello[[:crunchwrap_nospace:]]World"

    local array=("$@")
    local string=""
    local chunk

    for ((j = 0; j < "${#array[@]}"; j++)); do
        chunk="${array[$j]}"
        case "$chunk" in
            "$cc_nospace")
                string+=''
                ;;
            "$cc_tab")
                string+=$'\t'
                ;;
            "$cc_space")
                string+=" "
                ;;
            *)
                string+="$chunk"
                ;;
        esac
    done
    printf '%s\n' "$string"
}

_eval_tags() {
    # Tags that evaluate to empty strings are treated like any other. As
    # sometimes an empty string is desired in templates. You may override
    # this behavior by using '{{!' instead. This way crunchwrap will
    # return a code > 0

    local string="$*"
    local cw_variable cw_value

    _debug "func: '${FUNCNAME[0]}' called with argument: '$*'"

    # Replace '{{<d>' with '{{'                             (d for delimiter)
    # -----------------------------------------------------------------------
    # We must be clever with how we replace '{{%' with '{{'. If we perform
    # a global find/replace we run the risk of inadverently modifying other
    # substrings that contain '{{%' that don't have an accompanying '}}'

    # We're able to make the following assumptions for validate tags:
    # - There will never be any spaces left of '{{%'
    # - There will be a space to the right of '{{%'

    # Given this criteria I can safely perform a find/replace on '{{% '. The
    # space after the delimiter is critical!


    # fail_when_empty | escape_html | import_template
    # -----------------------------------------------------------------------
    # These variables can essentially equal anything. It's set to 'true' for
    # easy readability, further down all we're doing is making sure the variable
    # is set. The actual contents of the variable doesn't matter. See `-v`
    # in man bash.

    if [[ "$string" =~ $regex_crunchwrap_strict_syntax ]]; then
        fail_when_empty=true
        _debug "var: fail_when_empty='$fail_when_empty' for string: '$string'"

        string=$(_replace_first "$string" "$cw_pattern_left_strict " "{{ ")
    elif [[ "$string" =~ $regex_crunchwrap_escaped_syntax ]]; then
        escape_html=true
        _debug "var: escape_html='$escape_html' for string: '$string'"

        string=$(_replace_first "$string" "$cw_pattern_left_escaped " "{{ ")
    elif [[ "$string" =~ $regex_crunchwrap_import_syntax ]]; then
        import_template=true
        _debug "var: import_template='$import_tempate' for string: '$string'"

        string=$(_replace_first "$string" "$cw_pattern_left_import " "{{ ")
    fi

    cw_variable=$(_strip_brackets "$string")

    if [[ -v import_template ]] && [[ -n "$cw_variable" ]]; then
        unset import_template

        [[ ! -f "$cw_variable" ]] && _die "Template: '$cw_variable' does not exist."

        # Alternative way to print file contents. Many would use 'cat' here
        cw_value=$(printf '%s\n' "$(<$cw_variable)" | _read)
    else
        _debug "Current Environment:\n$(env)"
        cw_value=$(eval printf '%s' \"\$"$cw_variable"\")
    fi

    if [[ -v fail_when_empty ]] && [[ -z "$cw_value" ]]; then
        unset fail_when_empty

        _die "Variable: '$cw_variable' evaluated to an empty string." 126
    elif [[ -v escape_html ]] && [[ -n "$cw_value" ]]; then
        unset escape_html

        _debug "Calling func: '_escape_html' with argument: $cw_value"
        cw_value=$(_escape_html "$cw_value")

        _debug "var: cw_value='$cw_value'"
    fi

    _debug "var: cw_variable='$cw_variable'"
    _debug "var: cw_value='$cw_value'"

    # Check for nested crunchwrap tags
    if [[ "$cw_value" =~ $regex_crunchwrap_syntax ]]; then
        _debug "Found nested tags while evaluating: '$cw_variable'"
        cw_value=$(printf '%s\n' "$cw_value" | _read)
        # Don't let the above line intimidate you. All we're doing is re-using
        # exsiting code. We could accomplish the same thing with something like:

        # cw_value_old="$cw_value"
        # cw_value=''
        # while IFS='' read -r line; do
        #     cw_value+="$(_parse "$line")"
        # done <<< "$cw_value_old"
    fi

    # Print the string with the resolved tag/variable
    _replace_all "$string" "$cw_pattern_left $cw_variable $cw_pattern_right" "$cw_value"
}

_parse() {
    local line="$1"

    _debug "func: '${FUNCNAME[0]}' called with argument: '$1'"

    # Before we do anything we need to replace all whitespace with specialty
    # character classes that crunchwrap knows to look for
    line=$(_replace_all "$line" " " " $cc_space ") # spaces
    line=$(_replace_all "$line" $'\t' " $cc_tab ") # tabs

    # Take the line that was just read in, and split it into an array
    # Why? there could be multiple crunchrap tags in one line
    IFS=' ' read -r -a line_arr <<< "$line"

    declare -a line_fragment_arr line_arr_transformed
    declare -i found_open_tag found_tag_contents found_closed_tag
    _flush line_fragment_arr found_open_tag found_tag_contents found_closed_tag

    local line_arr_splice_count=0

    for ((i = 0; i < "${#line_arr[@]}"; i++)); do
        # This might seem counter-intuitive. Here's why don't do:
        # > for chunk in "${line_arr[@]}"

        # We dynamically add elements to array: 'line_arr'. The loop wouldn't
        # know to look for new elements inserted into the array since the length
        # of '${line_arr[@]}' gets cached at the beginning.
        chunk="${line_arr[$i]}"

        regex_conjointed_handlebars="^(\}\})(.*)(\{\{)$"
        if [[ "${chunk}" =~ $regex_conjointed_handlebars ]]; then
            # Check for consecutive crunchwrap variables that aren't delimited by a space:
            # '{{ <string> }}<string>{{ <string> }}'
            #              ^^^^^^^^^^^^
            _debug "Found conjoined left/right patterns: '$chunk'. Splitting..."

            local sandwiched_characters
            sandwiched_characters=$(_strip_left "$chunk" "}}")
            sandwiched_characters=$(_strip_right "$sandwiched_characters" "{{")
            # If var: sandwiched_characters is an empty string it won't be
            # included into array: line_arr

            local splice=("}}" "$cc_nospace" "$sandwiched_characters" "$cc_nospace" "{{")
            line_arr=("${line_arr[@]:0:$i}" "${splice[@]}" "${line_arr[@]:$((i+1))}")

            line_arr_splice_count=$((line_arr_splice_count + 1))
            _debug "var: line_arr_splice_count='$line_arr_splice_count'"

            # Since we've dynamically expanded thearray: line_arr we must
            # manually update var: chunk
            chunk="$cw_pattern_right"
        fi

        # Classify chunk. Does it have any special meaning to crunchwrap
        # or does the chunk consist of random characters?
        case "$chunk" in
            *"$cw_pattern_left"|*"$cw_pattern_left_strict"|*"$cw_pattern_left_escaped"|*"$cw_pattern_left_import")
                _debug "Found left pattern: '$chunk'"
                # We found the left: '{{ <string> }}'
                #                     ^^
                line_fragment_arr+=("$chunk")
                found_open_tag=1
                ;;
            "${cw_pattern_right}"*)
                _debug "Found right pattern: '$chunk'"
                # We found the right: '{{ <string> }}'
                #                                  ^^
                line_fragment_arr+=("$chunk")
                found_closed_tag=1

                # Check for mismatched/lone brackets
                if [[ $found_open_tag -eq 0 && $found_closed_tag -eq 1 ]]; then
                    _debug "Found unmatched handlebars. Ignoring '}}'"
                    found_closed_tag=0
                fi

                # Found matching starting/ending handlebars
                # We just flipped 'found_closed_tag' above, so their no point in checking it
                if [[ $found_open_tag -eq 1 && $found_tag_contents -eq 1 ]]; then
                    local results
                    results=$(_eval_tags "${line_fragment_arr[*]}")
                    [[ $? -eq 0 ]] || return

                    line_arr_transformed+=("$results")

                    # Reset. Just in case their are more crunchwrap tags in
                    # the remainder of array: line_arr
                    _flush line_fragment_arr found_open_tag found_tag_contents found_closed_tag
                fi
                ;;
            *)
                if [[ $found_open_tag -eq 0 ]] && [[ $found_closed_tag -eq 0 ]]; then
                    # We haven't found '{{' or '}}' so let's keep on going
                    line_arr_transformed+=("$chunk")
                elif [[ "$chunk" =~ $regex_character_class ]]; then
                    _debug "Ignoring crunchwrap character class: '$chunk'"
                elif [[ $found_open_tag -eq 1 && $found_closed_tag -eq 0 ]]; then
                    _debug "Found middle: '$chunk'"
                    # We found the middle: '{{ <string> }}'
                    #                          ^^^^^^^^
                    line_fragment_arr+=("$chunk")
                    found_tag_contents=1
                fi
                ;;
        esac

        if [[ $((i + 1)) -eq ${#line_arr[@]} ]]; then # We've reached the end of the line
            _debug "Line Transformation Complete    \( ﾟヮﾟ)/
                index: '$i'
                element: '${line_arr[$i]}'
                line_arr length: '${#line_arr[@]}'
                var: line_arr_splice_count='${line_arr_splice_count}'
                var: line_arr='${line_arr[*]}'
                var: line_arr_transformed='${line_arr_transformed[*]}'"

            # The finale. What gets printed to stdout
            _strip_character_classes "${line_arr_transformed[@]}"
        fi
    done
}

_source() {
    local files=("$@")
    local prefix=""
    local cmd

    # if [[ $fl_ignore_environment -eq 1 ]]; then
    #     _die "Option '--ignore-environment' not supported yet."
    # fi

    for f in "${files[@]}"; do
        if [[ ! -f "$f" ]]; then
            _die "File: '$f' does not exist."
        fi

        source "$f"
    done
}

_read() {
    # By default 'read' trims leading/trailing whitespace. so we must use override IFS
    while IFS='' read -r line || [[ -n "$line" ]]; do
        # || [[ -n "$line" ]]
        # Without this 'or' conditional single line inputs that don't end with
        # a newline won't be picked up

        if [[ ! "$line" =~ $regex_crunchwrap_syntax ]]; then
            # Pass the unaltered string through if it doesn't contain: {{ <string> }}
            _debug "Line: '$line' doesn't match regex. Passing it through unmodified."
            printf '%s\n' "$line"
            continue
        fi

        # The 'break' is kinda redundant since errexit is enabled
        _parse "$line" || break
    done
}

readonly usage="crunchwrap v${cw_version}, a logic-less templating engine.
Usage: ${0##*/} [options...] <path/to/variables>
Options:
  -h, --help                                 show this help text
  -v, --verbose                              make the operation more talkative
  -i, --ignore-emvironment                   start with an empty environment
  -V. --version                              print crunchwrap version

Report issues at https://github.com/egladman/crunchwrap/issues
"

main() {
    # Array of files that will 'sourced' before rendering template
    local source_files_arr=()
    local blacklisted_option

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -h|--help)
                printf '%s\n' "$usage"
                exit 0
                ;;
            -v|--verbose)
                fl_debug=1
                ;;
            -V|--version)
                printf '%s\n' "$cw_version"
                exit 0
                ;;
            -i|--ignore-environment)
                fl_ignore_environment=1

                # Further down we need to know whether '-i' or
                # '--ignore-environment' was passed in.
                blacklisted_option="$1"
                ;;
            # -e|--example)
            #     example_var="$2";
            #     shift
            #     ;;
            *)
                _debug "Appending '$1' to array: 'source_files_arr'"
                source_files_arr+=("$1")
        esac
        shift
    done

    if [[ -z "${source_files_arr[0]}" ]] && [[ $fl_ignore_environment -eq 1 ]]; then
        _die "Option 'ignore environment' requires file path(s). None given."
    elif [[ $fl_ignore_environment -eq 1 ]]; then # Rerun crunchwrap in an empty environment
        # Replace $blacklisted_option with empty string
        args=($(_replace_first "${args[*]}" "$blacklisted_option" ""))

        _debug "Executing: $0 without option 'ignore environment'" # for we don't break the space time continuum

        # OpenBSD's env doesn't support '--ignore-environment' so we must use `-i` for compatability
        exec /usr/bin/env -i PATH="$PATH" "$0" "${args[@]}"
    fi

    # Sideload environment variables if paths were specified
    [[ "${#source_files_arr[@]}" -gt 0 ]] && _source "${source_files_arr[@]}"

    _read
}

# Pass cli arguments to func: main
args=("$@")
main "${args[@]}"
